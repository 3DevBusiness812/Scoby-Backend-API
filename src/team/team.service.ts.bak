import { Injectable } from '@nestjs/common';
import { getConnection, getRepository } from 'typeorm';
import { Team, TeamMember } from './team.entity';
import { NotificationsService } from '../notifications/notifications.service';
import { User } from 'src/users/user.entity';
import {
  ImageProcessorService,
  ImageTargetType,
} from '../lib/image-processor/image-processor.service';
import { S3Service } from '../lib/s3/s3.service';
import { FileUpload } from '../lib/common/common.interfaces';
import { TEAM_ERRORS } from './team.messages';
import { ApolloError } from 'apollo-server-express';
import { TeamCreation, TeamUpdate } from './team.graphql';

@Injectable()
export class TeamService {
  constructor(
    private notificationsService: NotificationsService,
    private s3Service: S3Service,
    private imageProcessorService: ImageProcessorService,
  ) {}

  async createTeam(
    currentUserId: number,
    team: TeamCreation,
    avatar?: FileUpload,
    backgroundImage?: FileUpload,
  ): Promise<Team> {
    const repository = getRepository(Team);
    const {
      topics,
      name,
      description,
      invitedUsers,
      membersAllowedToHost,
      membersAllowedToInvite,
      teamType,
    } = team;
    const topicsCollection = topics.map((topicId) => ({ id: topicId }));
    const members = invitedUsers.map((id) => ({ user: { id } }));
    const savedTeam = await repository.save({
      name,
      description,
      topics: topicsCollection,
      ownerUser: {
        id: currentUserId,
      },
      members,
      membersAllowedToHost,
      membersAllowedToInvite,
      teamType,
    });

    this.notificationsService.sendTeamCreatedNotification(
      savedTeam.id,
      invitedUsers,
    );

    await this.uploadFileTeam(
      currentUserId,
      savedTeam.id,
      avatar,
      backgroundImage,
    );

    return (await repository.findOne(savedTeam.id, {
      relations: ['participantUsers', 'ownerUser'],
    })) as Team;
  }

  async uploadFileTeam(
    currentUserId: number,
    idTeam: number,
    avatar?: FileUpload,
    backgroundImage?: FileUpload,
  ): Promise<Team> {
    const repository = getRepository(Team);
    const team = (await repository.findOne(idTeam, {
      relations: ['ownerUser'],
    })) as Team;

    if (!team) {
      throw new ApolloError(
        TEAM_ERRORS.TEAM_NOT_FOUND.MESSAGE,
        TEAM_ERRORS.TEAM_NOT_FOUND.CODE,
      );
    }

    if (team.ownerUser.id !== currentUserId) {
      throw new ApolloError(
        TEAM_ERRORS.NOT_TEAM_OWNER.MESSAGE,
        TEAM_ERRORS.NOT_TEAM_OWNER.CODE,
      );
    }

    const removeAssets = [];

    if (avatar && team.avatar) {
      removeAssets.push(team.avatar);
    }

    if (backgroundImage && team.backgroundImage) {
      removeAssets.push(team.backgroundImage);
    }

    if (removeAssets.length) {
      await this.s3Service.removeFiles(removeAssets);
    }

    let avatarUpload;
    let backgroundImageUpload;

    if (avatar) {
      avatarUpload = this.imageProcessorService.optimizeImage(
        avatar.createReadStream(),
        ImageTargetType.AVATAR,
      );
    }

    if (backgroundImage) {
      backgroundImageUpload = this.imageProcessorService.optimizeImage(
        backgroundImage.createReadStream(),
        ImageTargetType.BACKGROUND_IMAGE,
      );
    }

    const [avatarResult, backgroundImageResult] = await Promise.all([
      avatarUpload
        ? this.s3Service.uploadFile({
            extension: avatarUpload.extension,
            mime: avatarUpload.mime,
            stream: avatarUpload.stream,
          })
        : undefined,
      backgroundImageUpload
        ? this.s3Service.uploadFile({
            extension: backgroundImageUpload.extension,
            mime: backgroundImageUpload.mime,
            stream: backgroundImageUpload.stream,
          })
        : undefined,
    ]);

    await repository.save({
      id: idTeam,
      avatar: avatarResult?.Key,
      backgroundImage: backgroundImageResult?.Key,
    });

    return (await repository.findOne(idTeam)) as Team;
  }

  async getUserInvites(userId: number): Promise<TeamMember[]> {
    const repository = getRepository(TeamMember);
    return await repository.find({
      relations: ['user', 'team'],
      where: { user: { id: userId } },
    });
  }

  async getTeamById(teamId: number): Promise<Team> {
    const repository = getRepository(Team);
    return (await repository.findOne(teamId, {
      relations: ['participantUsers', 'ownerUser', 'members'],
    })) as Team;
  }

  async getMembers(membersIds: number[]): Promise<TeamMember[]> {
    const repository = getRepository(TeamMember);
    return await repository.findByIds(membersIds, { relations: ['user'] });
  }

  async getInvitedUser(id: number): Promise<User> {
    return getConnection()
      .createQueryBuilder()
      .relation(TeamMember, 'user')
      .of(id)
      .loadOne() as Promise<User>;
  }

  async getTargetTeam(id: number): Promise<Team> {
    return getConnection()
      .createQueryBuilder()
      .relation(TeamMember, 'team')
      .of(id)
      .loadOne() as Promise<Team>;
  }
}
